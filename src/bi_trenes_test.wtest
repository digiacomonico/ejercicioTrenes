import bi_trenes.*

// Punto 0

test "pueden viajar 1500 personas"{
	var vagonA = new VagonPasajeros()
	var vagonB = new VagonPasajeros()
	var vagonC = new VagonCarga()
	vagonA.cantidadPasajeros(50,50)
	vagonB.cantidadPasajeros(100,100)
	var formacionA = new Formacion()
	formacionA.agregarVagon(vagonA)
	formacionA.agregarVagon(vagonB)
	formacionA.agregarVagon(vagonC)
	assert.equals(1500,formacionA.pasajerosPuedenViajar())
}

// Punto 1
test "1 vagon de pasajeros liviano" {
	var liviano = new VagonPasajeros()
	liviano.cantidadPasajeros(1,1)
	liviano.pesoMax()
	var formacionA = new Formacion()
	formacionA.agregarVagon(liviano)
	assert.equals(1,formacionA.cantVagonesLivianos())
}

test "0 vagones de pasajeros liviano" {
	var pesado = new VagonPasajeros()
	pesado.cantidadPasajeros(2000000,20000000)
	pesado.pesoMax()
	var formacionA = new Formacion()
	formacionA.agregarVagon(pesado)
	assert.equals(0,formacionA.cantVagonesLivianos())
}

test "1 vagon de pasajeros liviano, 1 pesado"{
	var liviano = new VagonPasajeros()
	liviano.cantidadPasajeros(1,1)
	liviano.pesoMax()
	var pesado = new VagonPasajeros()
	pesado.cantidadPasajeros(2000000,200000)
	pesado.pesoMax()
	var formacionA = new Formacion()
	formacionA.agregarVagon(liviano)
	formacionA.agregarVagon(pesado)
	assert.equals(1,formacionA.cantVagonesLivianos())
}


test "(2) 1 vagon de pasajeros liviano, 1 de carga liviano"{
	var livianoP = new VagonPasajeros()
	livianoP.cantidadPasajeros(1,1)
	livianoP.pesoMax()
	var livianoC = new VagonCarga()
	livianoC.peso(1000)
	livianoC.pesoMax()
	var formacionA = new Formacion()
	formacionA.agregarVagon(livianoP)
	formacionA.agregarVagon(livianoC)
	assert.equals(2,formacionA.cantVagonesLivianos())
}


// Punto 2

test "velocidad maxima de la locomotora mas lenta es igual a 1"{
	var formacionA = new Formacion()
	var lentoA = new Locomotora()
	lentoA.velMax(1000)
	formacionA.agregarLocomotora(lentoA)
	var lentoB = new Locomotora()
	lentoB.velMax(1200)
	formacionA.agregarLocomotora(lentoB)
	var lentoC = new Locomotora()
	lentoC.velMax(20000)
	formacionA.agregarLocomotora(lentoC)
	var lentoD = new Locomotora()
	lentoD.velMax(10)
	formacionA.agregarLocomotora(lentoD)
	var lentoE = new Locomotora()
	lentoE.velMax(15)
	formacionA.agregarLocomotora(lentoE)
	var lentoF = new Locomotora()
	lentoF.velMax(20)
	formacionA.agregarLocomotora(lentoF)
	var lentoG = new Locomotora()
	lentoG.velMax(1)
	formacionA.agregarLocomotora(lentoG)
	var rapido = new Locomotora()
	rapido.velMax(110)
	var lento = new Locomotora()
	lento.velMax(20000)
	formacionA.agregarLocomotora(lento)
	formacionA.agregarLocomotora(rapido)
	assert.equals(1,formacionA.velMaxF())
}

// Punto 3

test "formacion no es eficiente"{
	var locomotoraA = new Locomotora()
	var locomotoraB = new Locomotora()
	var locomotoraC = new Locomotora()
	var formacionA = new Formacion()
	locomotoraA.peso(1000)
	locomotoraA.pesoMax(6000)
	locomotoraA.arrastreUtil()
	locomotoraB.peso(1000)
	locomotoraB.pesoMax(5000)
	locomotoraB.arrastreUtil()
	locomotoraC.peso(1000)
	locomotoraC.pesoMax(8000)
	locomotoraC.arrastreUtil()
	formacionA.agregarLocomotora(locomotoraA)
	formacionA.agregarLocomotora(locomotoraB)
	formacionA.agregarLocomotora(locomotoraC)
	assert.equals(false,formacionA.locomotorasSonEficientes())
}

test "locomotora no es eficiente"{
	var locomotoraA = new Locomotora()
	var locomotoraB = new Locomotora()
	var locomotoraC = new Locomotora()
	var formacionA = new Formacion()
	locomotoraA.peso(1000)
	locomotoraA.pesoMax(10000)
	locomotoraA.arrastreUtil()
	locomotoraB.peso(1000)
	locomotoraB.pesoMax(20000)
	locomotoraB.arrastreUtil()
	locomotoraC.peso(1000)
	locomotoraC.pesoMax(9000)
	locomotoraC.arrastreUtil()
	formacionA.agregarLocomotora(locomotoraA)
	formacionA.agregarLocomotora(locomotoraB)
	formacionA.agregarLocomotora(locomotoraC)
	assert.equals(true,formacionA.locomotorasSonEficientes())
}

// Punto 4

test "2 locomotoras, 2 vagones puede moverse"{
	var vagonA = new VagonPasajeros()
	vagonA.cantidadPasajeros(1,1)
	vagonA.pesoMax()
	var vagonB = new VagonCarga()
	vagonB.peso(20)
	vagonB.pesoMax()
	var locomotoraA = new Locomotora()
	var locomotoraB = new Locomotora()
	locomotoraA.peso(1000)
	locomotoraA.pesoMax(11000)
	locomotoraB.peso(2000)
	locomotoraB.pesoMax(50000)
	//var locomotoras = [locomotoraA, locomotoraB]
	var formacionA = new Formacion()
	//formacionA.agregarLocomotoras(locomotoras)
	formacionA.agregarVagon(vagonA)
	formacionA.agregarVagon(vagonB)
	formacionA.agregarLocomotora(locomotoraA)
	formacionA.agregarLocomotora(locomotoraB)
	assert.equals(true,formacionA.puedeMoverse())
}

// Punto 5

test "A la formacion le faltan 10kg de arrastre util para moverse"{
	var vagonA = new VagonPasajeros()
	var vagonB = new VagonPasajeros()
	var locomotoraA = new Locomotora()
	var locomotoraB = new Locomotora()
	var formacionA = new Formacion()
	vagonA.cantidadPasajeros(3,10)
	vagonA.pesoMax()
	vagonB.cantidadPasajeros(2,10)
	vagonB.pesoMax()
	formacionA.agregarVagon(vagonA)
	formacionA.agregarVagon(vagonB)
	locomotoraA.peso(1000)
	locomotoraB.peso(1000)
	locomotoraA.pesoMax(5390)
	locomotoraB.pesoMax(11000)
	formacionA.agregarLocomotora(locomotoraA)
	formacionA.agregarLocomotora(locomotoraB)
	assert.equals(10,formacionA.cuantosKgsEmpujeFaltan())
}

test "La formacion ya se puede mover, arrastre util extra = 0"{
	var vagonA = new VagonPasajeros()
	var vagonB = new VagonPasajeros()
	var locomotoraA = new Locomotora()
	var locomotoraB = new Locomotora()
	var formacionA = new Formacion()
	vagonA.cantidadPasajeros(3,10)
	vagonA.pesoMax()
	vagonB.cantidadPasajeros(2,10)
	vagonB.pesoMax()
	formacionA.agregarVagon(vagonA)
	formacionA.agregarVagon(vagonB)
	locomotoraA.peso(1000)
	locomotoraB.peso(1000)
	locomotoraA.pesoMax(5400)
	locomotoraB.pesoMax(11000)
	formacionA.agregarLocomotora(locomotoraA)
	formacionA.agregarLocomotora(locomotoraB)
	assert.equals(0,formacionA.cuantosKgsEmpujeFaltan())
}

test "formacion mas pesada"{
	var vagonA = new VagonPasajeros()
	var vagonB = new VagonPasajeros()
	var vagonC = new VagonPasajeros()
	var vagonD = new VagonPasajeros()
	var formacionA = new Formacion()
	var formacionB = new Formacion()
	vagonA.cantidadPasajeros(3,10)
	vagonA.pesoMax()
	vagonB.cantidadPasajeros(2,10)
	vagonB.pesoMax()
	vagonC.cantidadPasajeros(4,10)
	vagonC.pesoMax()
	vagonD.cantidadPasajeros(5,1000)
	vagonD.pesoMax()
	formacionA.agregarVagon(vagonA)
	formacionA.agregarVagon(vagonB)
	formacionB.agregarVagon(vagonC)
	formacionB.agregarVagon(vagonD)
	deposito.agregarFormacion(formacionA)
	deposito.agregarFormacion(formacionB)	
	assert.equals([vagonA,vagonD],deposito.vagonesMasPesados())
}


test "deposito necesita conductor experimentado"{
	var vagonA = new VagonPasajeros()
	var vagonB = new VagonPasajeros()
	var vagonC = new VagonPasajeros()
	var vagonD = new VagonPasajeros()
	var vagonE = new VagonPasajeros()
	var vagonF = new VagonPasajeros()
	var vagonG = new VagonPasajeros()
	var vagonH = new VagonPasajeros()
	var vagonI = new VagonPasajeros()
	var vagonJ = new VagonPasajeros()
	var vagonK = new VagonPasajeros()
	var vagonL = new VagonPasajeros()
	var vagonM = new VagonPasajeros()
	var vagonN = new VagonPasajeros()
	var vagonO = new VagonPasajeros()
	var vagonP = new VagonPasajeros()
	var vagonQ = new VagonPasajeros()
	var vagonR = new VagonPasajeros()
	var vagonS = new VagonPasajeros()
	var vagonT = new VagonPasajeros()
	var locomotoraA = new Locomotora()
	var formacionA = new Formacion()
	formacionA.agregarVagon(vagonA)
	formacionA.agregarVagon(vagonB)
	formacionA.agregarVagon(vagonC)
	formacionA.agregarVagon(vagonD)
	formacionA.agregarVagon(vagonE)
	formacionA.agregarVagon(vagonF)
	formacionA.agregarVagon(vagonG)
	formacionA.agregarVagon(vagonH)
	formacionA.agregarVagon(vagonI)
	formacionA.agregarVagon(vagonJ)
	formacionA.agregarVagon(vagonK)
	formacionA.agregarVagon(vagonL)
	formacionA.agregarVagon(vagonM)
	formacionA.agregarVagon(vagonN)
	formacionA.agregarVagon(vagonO)
	formacionA.agregarVagon(vagonP)
	formacionA.agregarVagon(vagonQ)
	formacionA.agregarVagon(vagonR)
	formacionA.agregarVagon(vagonS)
	formacionA.agregarVagon(vagonT)
	formacionA.agregarLocomotora(locomotoraA)
	deposito.agregarFormacion(formacionA)
	assert.equals(true,deposito.necesitaConductorExperimentado())
}

test "deposito no necesita conductor experimentado"{
	var vagonA = new VagonPasajeros()
	vagonA.cantidadPasajeros(1,1)
	vagonA.pesoMax()
	var vagonB = new VagonPasajeros()
	vagonB.cantidadPasajeros(1,1)
	vagonB.pesoMax()
	var vagonC = new VagonPasajeros()
	vagonC.cantidadPasajeros(1,1)
	vagonC.pesoMax()
	var vagonD = new VagonPasajeros()
	vagonD.cantidadPasajeros(1,1)
	vagonD.pesoMax()
	var vagonE = new VagonPasajeros()
	vagonE.cantidadPasajeros(1,1)
	vagonE.pesoMax()
	var vagonF = new VagonPasajeros()
	vagonF.cantidadPasajeros(1,1)
	vagonF.pesoMax()
	var vagonG = new VagonPasajeros()
	vagonG.cantidadPasajeros(1,1)
	vagonG.pesoMax()
	var vagonH = new VagonPasajeros()
	vagonH.cantidadPasajeros(1,1)
	vagonH.pesoMax()
	var vagonI = new VagonPasajeros()
	vagonI.cantidadPasajeros(1,1)
	vagonI.pesoMax()
	var locomotoraA = new Locomotora()
	locomotoraA.peso(1000)
	var formacionA = new Formacion()
	formacionA.agregarVagon(vagonA)
	formacionA.agregarVagon(vagonB)
	formacionA.agregarVagon(vagonC)
	formacionA.agregarVagon(vagonD)
	formacionA.agregarVagon(vagonE)
	formacionA.agregarVagon(vagonF)
	formacionA.agregarVagon(vagonG)
	formacionA.agregarVagon(vagonH)
	formacionA.agregarVagon(vagonI)
	formacionA.agregarLocomotora(locomotoraA)
	deposito.agregarFormacion(formacionA)
	assert.equals(false,deposito.necesitaConductorExperimentado())
}


test "formacion no puede moverse, agrega locomotora del deposito y puede moverse"{
	var vagonA = new VagonPasajeros()
	var vagonB = new VagonPasajeros()
	var locomotoraA = new Locomotora()
	var locomotoraB = new Locomotora()
	var locomotoraC = new Locomotora()
	var formacionA = new Formacion()
	vagonA.cantidadPasajeros(3,10)
	vagonA.pesoMax()
	vagonB.cantidadPasajeros(2,10)
	vagonB.pesoMax()
	formacionA.agregarVagon(vagonA)
	formacionA.agregarVagon(vagonB)
	locomotoraA.peso(1000)
	locomotoraB.peso(1000)
	locomotoraA.pesoMax(5390)
	locomotoraB.pesoMax(11000)
	locomotoraC.peso(100)
	locomotoraC.pesoMax(111)
	formacionA.agregarLocomotora(locomotoraA)
	formacionA.agregarLocomotora(locomotoraB)
	deposito.agregarFormacion(formacionA)
	deposito.agregarLocomotoraLibre(locomotoraC)
	deposito.potenciar(formacionA)
	assert.equals(0,formacionA.cuantosKgsEmpujeFaltan())
}